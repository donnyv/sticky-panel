(function (e) { var t = { options: { topPadding: 0, afterDetachCSSClass: "", savePanelSpace: false }, init: function (n) { var n = e.extend({}, t.options, n); return this.each(function () { var r = Math.ceil(Math.random() * 9999); e(this).data("stickyPanel.state", { stickyPanelId: r, isDetached: false, options: n }); e(window).bind("scroll.stickyPanel_" + r, { selected: e(this) }, t.scroll) }) }, scroll: function (n) { var r = n.data.selected; var i = r.data("stickyPanel.state").options; var s = e(window).height(); var o = r.outerHeight(true); var u = e(document).scrollTop(); var a = e(document).height(); var f = a - s; var l = r.position().top - i.topPadding; var c = l < 0 ? 0 : l; var h = r.data("stickyPanel.state").isDetached; if (u <= f && u > c && !h) { r.data("stickyPanel.state").isDetached = true; var p = 0; if (i.topPadding != "undefined") { p = p + i.topPadding } var d = r.offset().left; r.data("PanelsTop", r.offset().top - p); if (i.savePanelSpace == true) { var v = r.outerWidth(true); var m = r.css("float"); var g = r.css("display"); var y = Math.ceil(Math.random() * 9999); r.data("stickyPanel.PanelSpaceID", "stickyPanelSpace" + y); r.before("<div id='" + r.data("stickyPanel.PanelSpaceID") + "' style='width:" + v + "px;height:" + o + "px;float:" + m + ";display:" + g + ";'> </div>") } if (i.afterDetachCSSClass != "") { r.addClass(i.afterDetachCSSClass) } r.data("Original_Inline_CSS", !r.attr("style") ? "" : r.attr("style")); r.css({ margin: 0, left: d, top: p, position: "fixed" }) } if (u <= r.data("PanelsTop") && r.css("top") != "auto" && h) { t.unstick(r) } }, unstick: function (n) { var r = n ? n : this; r.data("stickyPanel.state").isDetached = false; var i = r.data("stickyPanel.state").options; if (i.savePanelSpace == true) { e("#" + r.data("stickyPanel.PanelSpaceID")).remove() } r.attr("style", r.data("Original_Inline_CSS")); if (i.afterDetachCSSClass != "") { r.removeClass(i.afterDetachCSSClass) } if (!n) t._unstick(r) }, _unstick: function (t) { e(window).unbind("scroll.stickyPanel_" + t.data("stickyPanel.state").stickyPanelId) } }; e.fn.stickyPanel = function (n) { if (t[n]) { return t[n].apply(this, Array.prototype.slice.call(arguments, 1)) } else if (typeof n === "object" || !n) { return t.init.apply(this, arguments) } else { e.error("Method " + n + " does not exist on jQuery.stickyPanel") } } })(jQuery)